// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: demo_server_stream.proto

package main

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReplyMessage struct {
	Timestamp            *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReplyMessage) Reset()         { *m = ReplyMessage{} }
func (m *ReplyMessage) String() string { return proto.CompactTextString(m) }
func (*ReplyMessage) ProtoMessage()    {}
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d749793e79dde6e, []int{0}
}
func (m *ReplyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyMessage.Unmarshal(m, b)
}
func (m *ReplyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyMessage.Marshal(b, m, deterministic)
}
func (m *ReplyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMessage.Merge(m, src)
}
func (m *ReplyMessage) XXX_Size() int {
	return xxx_messageInfo_ReplyMessage.Size(m)
}
func (m *ReplyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMessage proto.InternalMessageInfo

func (m *ReplyMessage) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ReplyMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ReplyMessage)(nil), "main.ReplyMessage")
}

func init() { proto.RegisterFile("demo_server_stream.proto", fileDescriptor_4d749793e79dde6e) }

var fileDescriptor_4d749793e79dde6e = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4b, 0x04, 0x31,
	0x14, 0x84, 0x8d, 0x88, 0x72, 0x51, 0x41, 0x52, 0x48, 0x88, 0x82, 0xc7, 0x55, 0x57, 0x65, 0xe5,
	0x6c, 0xac, 0x05, 0x4b, 0x9b, 0xc4, 0xfe, 0x78, 0xab, 0xcf, 0x25, 0xb0, 0x2f, 0x09, 0x49, 0x3c,
	0xb8, 0x7f, 0x2f, 0x97, 0xec, 0xaa, 0x68, 0x39, 0xcc, 0x97, 0xc9, 0xcc, 0xe3, 0xf2, 0x1d, 0x29,
	0x6c, 0x33, 0xa6, 0x1d, 0xa6, 0x6d, 0x2e, 0x09, 0x81, 0x74, 0x4c, 0xa1, 0x04, 0x71, 0x42, 0xe0,
	0xbc, 0xba, 0x1d, 0x42, 0x18, 0x46, 0xec, 0x20, 0xba, 0x0e, 0xbc, 0x0f, 0x05, 0x8a, 0x0b, 0x3e,
	0x37, 0x46, 0xdd, 0x4d, 0x6e, 0x55, 0xfd, 0xe7, 0x47, 0x57, 0x1c, 0x61, 0x2e, 0x40, 0x71, 0x02,
	0x6e, 0xfe, 0x02, 0x48, 0xb1, 0xec, 0x9b, 0xb9, 0xea, 0xf9, 0x85, 0xc1, 0x38, 0xee, 0x5f, 0x30,
	0x67, 0x18, 0x50, 0x3c, 0xf2, 0xc5, 0xf7, 0x7b, 0xc9, 0x96, 0x6c, 0x7d, 0xbe, 0x51, 0xba, 0x05,
	0xe8, 0x39, 0x40, 0xbf, 0xce, 0x84, 0xf9, 0x81, 0x85, 0xe4, 0x67, 0xd4, 0x42, 0xe4, 0xf1, 0x92,
	0xad, 0x17, 0x66, 0x96, 0x1b, 0xcb, 0x2f, 0xad, 0xa3, 0x38, 0xa2, 0xc5, 0xb4, 0x73, 0x6f, 0x28,
	0x9e, 0xf8, 0x95, 0x41, 0x88, 0xb6, 0x2e, 0xb6, 0x75, 0xb0, 0xb8, 0xfe, 0xf7, 0xcb, 0xf3, 0xa1,
	0xa6, 0x12, 0xfa, 0x70, 0x03, 0xfd, 0xbb, 0xe4, 0xea, 0xe8, 0x9e, 0xf5, 0xa7, 0x95, 0x7b, 0xf8,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x9c, 0xdd, 0xdc, 0x3d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleServiceClient interface {
	ReapServerStream(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (SimpleService_ReapServerStreamClient, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) ReapServerStream(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (SimpleService_ReapServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[0], "/main.SimpleService/ReapServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceReapServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleService_ReapServerStreamClient interface {
	Recv() (*ReplyMessage, error)
	grpc.ClientStream
}

type simpleServiceReapServerStreamClient struct {
	grpc.ClientStream
}

func (x *simpleServiceReapServerStreamClient) Recv() (*ReplyMessage, error) {
	m := new(ReplyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServiceServer is the server API for SimpleService service.
type SimpleServiceServer interface {
	ReapServerStream(*types.Empty, SimpleService_ReapServerStreamServer) error
}

// UnimplementedSimpleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (*UnimplementedSimpleServiceServer) ReapServerStream(req *types.Empty, srv SimpleService_ReapServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReapServerStream not implemented")
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_ReapServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServiceServer).ReapServerStream(m, &simpleServiceReapServerStreamServer{stream})
}

type SimpleService_ReapServerStreamServer interface {
	Send(*ReplyMessage) error
	grpc.ServerStream
}

type simpleServiceReapServerStreamServer struct {
	grpc.ServerStream
}

func (x *simpleServiceReapServerStreamServer) Send(m *ReplyMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReapServerStream",
			Handler:       _SimpleService_ReapServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "demo_server_stream.proto",
}
